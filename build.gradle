buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
	}
}

apply plugin: 'java'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'antlr'
apply plugin: 'application'
apply plugin: 'org.junit.platform.gradle.plugin'

ext.antlrVersion = '4.7.1'
ext.junitVintageVersion  = '5.1.0'
ext.junitPlatformVersion = '1.1.0'
ext.junitJupiterVersion = '5.1.0'
ext.log4jVersion = '2.9.0'
ext.sat4jVersion = '2.3.5'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
	mavenCentral()
	jcenter()
}

junitPlatform {
	filters {
		engines {
			// include 'junit-jupiter', 'junit-vintage'
			// exclude 'custom-engine'
		}
		tags {
			// include 'fast'
			exclude 'slow'
		}
		// includeClassNamePattern '.*Test'
	}
	// configurationParameter 'junit.jupiter.conditions.deactivate', '*'
	// enableStandardTestTask true
	// reportsDir file('build/test-results/junit-platform') // this is the default
	logManager 'org.apache.logging.log4j.jul.LogManager'
}


dependencies {
	// We need to give the ANTLR Plugin a hint.
	antlr group: 'org.antlr', name: 'antlr4', version: "${antlrVersion}"

	// Re-introduce antlr4-runtime as compile dependency.
	compile group: 'org.antlr', name: 'antlr4-runtime', version: "${antlrVersion}"

	compile group: 'org.ow2.sat4j', name: 'org.ow2.sat4j.core',   version: "${sat4jVersion}"
	compile group: 'org.ow2.sat4j', name: 'org.ow2.sat4j.maxsat', version: "${sat4jVersion}"

	testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api',    version: "${junitJupiterVersion}"
	testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: "${junitJupiterVersion}"
	testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: "${junitJupiterVersion}"

	testRuntime group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4jVersion}"
	testRuntime group: 'org.apache.logging.log4j', name: 'log4j-jul',  version: "${log4jVersion}"
}

compileJava {
	options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

compileTestJava {
	options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

// Pin checkstyle version.
checkstyle {
	toolVersion = '8.8'

	configFile = rootProject.file('config/checkstyle/checkstyle.xml')
}

jacocoTestReport {
	reports {
		xml.enabled = true
		html.enabled = true
	}

	// NOTE: Contents of the antlr subpackage are autogenerated (see configuration of
	//       AntlrTasks above). It does not make sense to include them in our coverage
	//       report.
	afterEvaluate {
		classDirectories = files(classDirectories.files.collect {
			fileTree(dir: it, exclude: "it/unibz/stud_inf/ils/white/prisma/antlr/**")
		})
	}
}

test {
	testLogging {
		exceptionFormat = 'full'
	}
}

/* The following configuration directive is a work-around for a fault in the Gradle
 * ANTLR plugin. It would require both antlr4 and antlr4-runtime at compile time and
 * at run time, which unnecessarily bloats our JARs. Only antlr4-runtime is needed.
 * We therefore remove this extension of antlr dependencies being compile dependencies
 * and reintroduce them on our own.
 */
configurations {
	compile {
		extendsFrom = extendsFrom.findAll { it != configurations.antlr }
	}
}

tasks.withType(AntlrTask) {
	// See https://github.com/antlr/antlr4/blob/master/doc/tool-options.md
	arguments += [
			"-visitor",
			"-no-listener",
			"-long-messages",
			"-package", "it.unibz.stud_inf.ils.white.prisma.antlr",
			"-Werror",
			"-Xlog",
			"-lib", "src/main/antlr/it/unibz/stud_inf/ils/white/prisma/antlr"
	]
}

mainClassName = 'it.unibz.stud_inf.ils.white.prisma.Main'

task bundledJar(type: Jar) {
	manifest {
		attributes 'Main-Class': mainClassName
	}

	from {
		configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
	}

	archiveName = "${project.name}-bundled.jar"

	with jar
}
